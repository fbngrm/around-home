// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/fbngrm/around-home/ent/partner"
)

// Partner is the model entity for the Partner schema.
type Partner struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating int `json:"rating,omitempty"`
	// RadiusOfOperation holds the value of the "radiusOfOperation" field.
	RadiusOfOperation float64 `json:"radiusOfOperation,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PartnerQuery when eager-loading is set.
	Edges PartnerEdges `json:"edges"`
}

// PartnerEdges holds the relations/edges for other nodes in the graph.
type PartnerEdges struct {
	// Materials holds the value of the materials edge.
	Materials []*Material `json:"materials,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MaterialsOrErr returns the Materials value or an error if the edge
// was not loaded in eager-loading.
func (e PartnerEdges) MaterialsOrErr() ([]*Material, error) {
	if e.loadedTypes[0] {
		return e.Materials, nil
	}
	return nil, &NotLoadedError{edge: "materials"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Partner) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case partner.FieldRadiusOfOperation:
			values[i] = new(sql.NullFloat64)
		case partner.FieldID, partner.FieldRating:
			values[i] = new(sql.NullInt64)
		case partner.FieldAddress:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Partner", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Partner fields.
func (pa *Partner) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case partner.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case partner.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				pa.Address = value.String
			}
		case partner.FieldRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				pa.Rating = int(value.Int64)
			}
		case partner.FieldRadiusOfOperation:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field radiusOfOperation", values[i])
			} else if value.Valid {
				pa.RadiusOfOperation = value.Float64
			}
		}
	}
	return nil
}

// QueryMaterials queries the "materials" edge of the Partner entity.
func (pa *Partner) QueryMaterials() *MaterialQuery {
	return (&PartnerClient{config: pa.config}).QueryMaterials(pa)
}

// Update returns a builder for updating this Partner.
// Note that you need to call Partner.Unwrap() before calling this method if this Partner
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Partner) Update() *PartnerUpdateOne {
	return (&PartnerClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Partner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Partner) Unwrap() *Partner {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Partner is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Partner) String() string {
	var builder strings.Builder
	builder.WriteString("Partner(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("address=")
	builder.WriteString(pa.Address)
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", pa.Rating))
	builder.WriteString(", ")
	builder.WriteString("radiusOfOperation=")
	builder.WriteString(fmt.Sprintf("%v", pa.RadiusOfOperation))
	builder.WriteByte(')')
	return builder.String()
}

// Partners is a parsable slice of Partner.
type Partners []*Partner

func (pa Partners) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
