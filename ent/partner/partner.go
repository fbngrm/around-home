// Code generated by ent, DO NOT EDIT.

package partner

const (
	// Label holds the string label denoting the partner type in the database.
	Label = "partner"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// FieldRadiusOfOperation holds the string denoting the radiusofoperation field in the database.
	FieldRadiusOfOperation = "radius_of_operation"
	// EdgeMaterials holds the string denoting the materials edge name in mutations.
	EdgeMaterials = "materials"
	// Table holds the table name of the partner in the database.
	Table = "partners"
	// MaterialsTable is the table that holds the materials relation/edge. The primary key declared below.
	MaterialsTable = "partner_materials"
	// MaterialsInverseTable is the table name for the Material entity.
	// It exists in this package in order to avoid circular dependency with the "material" package.
	MaterialsInverseTable = "materials"
)

// Columns holds all SQL columns for partner fields.
var Columns = []string{
	FieldID,
	FieldAddress,
	FieldRating,
	FieldRadiusOfOperation,
}

var (
	// MaterialsPrimaryKey and MaterialsColumn2 are the table columns denoting the
	// primary key for the materials relation (M2M).
	MaterialsPrimaryKey = []string{"partner_id", "material_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AddressValidator is a validator for the "address" field. It is called by the builders before save.
	AddressValidator func(string) error
)
