// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/fbngrm/around-home/ent/material"
	"github.com/fbngrm/around-home/ent/partner"
	"github.com/fbngrm/around-home/ent/predicate"
)

// PartnerUpdate is the builder for updating Partner entities.
type PartnerUpdate struct {
	config
	hooks    []Hook
	mutation *PartnerMutation
}

// Where appends a list predicates to the PartnerUpdate builder.
func (pu *PartnerUpdate) Where(ps ...predicate.Partner) *PartnerUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetAddress sets the "address" field.
func (pu *PartnerUpdate) SetAddress(s string) *PartnerUpdate {
	pu.mutation.SetAddress(s)
	return pu
}

// SetRating sets the "rating" field.
func (pu *PartnerUpdate) SetRating(i int) *PartnerUpdate {
	pu.mutation.ResetRating()
	pu.mutation.SetRating(i)
	return pu
}

// AddRating adds i to the "rating" field.
func (pu *PartnerUpdate) AddRating(i int) *PartnerUpdate {
	pu.mutation.AddRating(i)
	return pu
}

// SetRadiusOfOperation sets the "radiusOfOperation" field.
func (pu *PartnerUpdate) SetRadiusOfOperation(f float64) *PartnerUpdate {
	pu.mutation.ResetRadiusOfOperation()
	pu.mutation.SetRadiusOfOperation(f)
	return pu
}

// AddRadiusOfOperation adds f to the "radiusOfOperation" field.
func (pu *PartnerUpdate) AddRadiusOfOperation(f float64) *PartnerUpdate {
	pu.mutation.AddRadiusOfOperation(f)
	return pu
}

// AddMaterialIDs adds the "materials" edge to the Material entity by IDs.
func (pu *PartnerUpdate) AddMaterialIDs(ids ...int) *PartnerUpdate {
	pu.mutation.AddMaterialIDs(ids...)
	return pu
}

// AddMaterials adds the "materials" edges to the Material entity.
func (pu *PartnerUpdate) AddMaterials(m ...*Material) *PartnerUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddMaterialIDs(ids...)
}

// Mutation returns the PartnerMutation object of the builder.
func (pu *PartnerUpdate) Mutation() *PartnerMutation {
	return pu.mutation
}

// ClearMaterials clears all "materials" edges to the Material entity.
func (pu *PartnerUpdate) ClearMaterials() *PartnerUpdate {
	pu.mutation.ClearMaterials()
	return pu
}

// RemoveMaterialIDs removes the "materials" edge to Material entities by IDs.
func (pu *PartnerUpdate) RemoveMaterialIDs(ids ...int) *PartnerUpdate {
	pu.mutation.RemoveMaterialIDs(ids...)
	return pu
}

// RemoveMaterials removes "materials" edges to Material entities.
func (pu *PartnerUpdate) RemoveMaterials(m ...*Material) *PartnerUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemoveMaterialIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PartnerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartnerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PartnerUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PartnerUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PartnerUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PartnerUpdate) check() error {
	if v, ok := pu.mutation.Address(); ok {
		if err := partner.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Partner.address": %w`, err)}
		}
	}
	return nil
}

func (pu *PartnerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partner.Table,
			Columns: partner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partner.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partner.FieldAddress,
		})
	}
	if value, ok := pu.mutation.Rating(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partner.FieldRating,
		})
	}
	if value, ok := pu.mutation.AddedRating(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partner.FieldRating,
		})
	}
	if value, ok := pu.mutation.RadiusOfOperation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: partner.FieldRadiusOfOperation,
		})
	}
	if value, ok := pu.mutation.AddedRadiusOfOperation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: partner.FieldRadiusOfOperation,
		})
	}
	if pu.mutation.MaterialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partner.MaterialsTable,
			Columns: partner.MaterialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: material.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMaterialsIDs(); len(nodes) > 0 && !pu.mutation.MaterialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partner.MaterialsTable,
			Columns: partner.MaterialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: material.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MaterialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partner.MaterialsTable,
			Columns: partner.MaterialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: material.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PartnerUpdateOne is the builder for updating a single Partner entity.
type PartnerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PartnerMutation
}

// SetAddress sets the "address" field.
func (puo *PartnerUpdateOne) SetAddress(s string) *PartnerUpdateOne {
	puo.mutation.SetAddress(s)
	return puo
}

// SetRating sets the "rating" field.
func (puo *PartnerUpdateOne) SetRating(i int) *PartnerUpdateOne {
	puo.mutation.ResetRating()
	puo.mutation.SetRating(i)
	return puo
}

// AddRating adds i to the "rating" field.
func (puo *PartnerUpdateOne) AddRating(i int) *PartnerUpdateOne {
	puo.mutation.AddRating(i)
	return puo
}

// SetRadiusOfOperation sets the "radiusOfOperation" field.
func (puo *PartnerUpdateOne) SetRadiusOfOperation(f float64) *PartnerUpdateOne {
	puo.mutation.ResetRadiusOfOperation()
	puo.mutation.SetRadiusOfOperation(f)
	return puo
}

// AddRadiusOfOperation adds f to the "radiusOfOperation" field.
func (puo *PartnerUpdateOne) AddRadiusOfOperation(f float64) *PartnerUpdateOne {
	puo.mutation.AddRadiusOfOperation(f)
	return puo
}

// AddMaterialIDs adds the "materials" edge to the Material entity by IDs.
func (puo *PartnerUpdateOne) AddMaterialIDs(ids ...int) *PartnerUpdateOne {
	puo.mutation.AddMaterialIDs(ids...)
	return puo
}

// AddMaterials adds the "materials" edges to the Material entity.
func (puo *PartnerUpdateOne) AddMaterials(m ...*Material) *PartnerUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddMaterialIDs(ids...)
}

// Mutation returns the PartnerMutation object of the builder.
func (puo *PartnerUpdateOne) Mutation() *PartnerMutation {
	return puo.mutation
}

// ClearMaterials clears all "materials" edges to the Material entity.
func (puo *PartnerUpdateOne) ClearMaterials() *PartnerUpdateOne {
	puo.mutation.ClearMaterials()
	return puo
}

// RemoveMaterialIDs removes the "materials" edge to Material entities by IDs.
func (puo *PartnerUpdateOne) RemoveMaterialIDs(ids ...int) *PartnerUpdateOne {
	puo.mutation.RemoveMaterialIDs(ids...)
	return puo
}

// RemoveMaterials removes "materials" edges to Material entities.
func (puo *PartnerUpdateOne) RemoveMaterials(m ...*Material) *PartnerUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemoveMaterialIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PartnerUpdateOne) Select(field string, fields ...string) *PartnerUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Partner entity.
func (puo *PartnerUpdateOne) Save(ctx context.Context) (*Partner, error) {
	var (
		err  error
		node *Partner
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PartnerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Partner)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PartnerMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PartnerUpdateOne) SaveX(ctx context.Context) *Partner {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PartnerUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PartnerUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PartnerUpdateOne) check() error {
	if v, ok := puo.mutation.Address(); ok {
		if err := partner.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Partner.address": %w`, err)}
		}
	}
	return nil
}

func (puo *PartnerUpdateOne) sqlSave(ctx context.Context) (_node *Partner, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   partner.Table,
			Columns: partner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: partner.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Partner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, partner.FieldID)
		for _, f := range fields {
			if !partner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != partner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: partner.FieldAddress,
		})
	}
	if value, ok := puo.mutation.Rating(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partner.FieldRating,
		})
	}
	if value, ok := puo.mutation.AddedRating(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: partner.FieldRating,
		})
	}
	if value, ok := puo.mutation.RadiusOfOperation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: partner.FieldRadiusOfOperation,
		})
	}
	if value, ok := puo.mutation.AddedRadiusOfOperation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: partner.FieldRadiusOfOperation,
		})
	}
	if puo.mutation.MaterialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partner.MaterialsTable,
			Columns: partner.MaterialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: material.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMaterialsIDs(); len(nodes) > 0 && !puo.mutation.MaterialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partner.MaterialsTable,
			Columns: partner.MaterialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: material.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MaterialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   partner.MaterialsTable,
			Columns: partner.MaterialsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: material.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Partner{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{partner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
