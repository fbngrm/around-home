// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/fbngrm/around-home/ent/material"
	"github.com/fbngrm/around-home/ent/partner"
	"github.com/fbngrm/around-home/ent/predicate"
	"github.com/fbngrm/around-home/pkg/materials"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMaterial = "Material"
	TypePartner  = "Partner"
)

// MaterialMutation represents an operation that mutates the Material nodes in the graph.
type MaterialMutation struct {
	config
	op              Op
	typ             string
	id              *int
	material        *materials.Material
	clearedFields   map[string]struct{}
	partners        map[int]struct{}
	removedpartners map[int]struct{}
	clearedpartners bool
	done            bool
	oldValue        func(context.Context) (*Material, error)
	predicates      []predicate.Material
}

var _ ent.Mutation = (*MaterialMutation)(nil)

// materialOption allows management of the mutation configuration using functional options.
type materialOption func(*MaterialMutation)

// newMaterialMutation creates new mutation for the Material entity.
func newMaterialMutation(c config, op Op, opts ...materialOption) *MaterialMutation {
	m := &MaterialMutation{
		config:        c,
		op:            op,
		typ:           TypeMaterial,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMaterialID sets the ID field of the mutation.
func withMaterialID(id int) materialOption {
	return func(m *MaterialMutation) {
		var (
			err   error
			once  sync.Once
			value *Material
		)
		m.oldValue = func(ctx context.Context) (*Material, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Material.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMaterial sets the old Material of the mutation.
func withMaterial(node *Material) materialOption {
	return func(m *MaterialMutation) {
		m.oldValue = func(context.Context) (*Material, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MaterialMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MaterialMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MaterialMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MaterialMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Material.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMaterial sets the "material" field.
func (m *MaterialMutation) SetMaterial(value materials.Material) {
	m.material = &value
}

// Material returns the value of the "material" field in the mutation.
func (m *MaterialMutation) Material() (r materials.Material, exists bool) {
	v := m.material
	if v == nil {
		return
	}
	return *v, true
}

// OldMaterial returns the old "material" field's value of the Material entity.
// If the Material object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MaterialMutation) OldMaterial(ctx context.Context) (v materials.Material, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaterial is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaterial requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaterial: %w", err)
	}
	return oldValue.Material, nil
}

// ResetMaterial resets all changes to the "material" field.
func (m *MaterialMutation) ResetMaterial() {
	m.material = nil
}

// AddPartnerIDs adds the "partners" edge to the Partner entity by ids.
func (m *MaterialMutation) AddPartnerIDs(ids ...int) {
	if m.partners == nil {
		m.partners = make(map[int]struct{})
	}
	for i := range ids {
		m.partners[ids[i]] = struct{}{}
	}
}

// ClearPartners clears the "partners" edge to the Partner entity.
func (m *MaterialMutation) ClearPartners() {
	m.clearedpartners = true
}

// PartnersCleared reports if the "partners" edge to the Partner entity was cleared.
func (m *MaterialMutation) PartnersCleared() bool {
	return m.clearedpartners
}

// RemovePartnerIDs removes the "partners" edge to the Partner entity by IDs.
func (m *MaterialMutation) RemovePartnerIDs(ids ...int) {
	if m.removedpartners == nil {
		m.removedpartners = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.partners, ids[i])
		m.removedpartners[ids[i]] = struct{}{}
	}
}

// RemovedPartners returns the removed IDs of the "partners" edge to the Partner entity.
func (m *MaterialMutation) RemovedPartnersIDs() (ids []int) {
	for id := range m.removedpartners {
		ids = append(ids, id)
	}
	return
}

// PartnersIDs returns the "partners" edge IDs in the mutation.
func (m *MaterialMutation) PartnersIDs() (ids []int) {
	for id := range m.partners {
		ids = append(ids, id)
	}
	return
}

// ResetPartners resets all changes to the "partners" edge.
func (m *MaterialMutation) ResetPartners() {
	m.partners = nil
	m.clearedpartners = false
	m.removedpartners = nil
}

// Where appends a list predicates to the MaterialMutation builder.
func (m *MaterialMutation) Where(ps ...predicate.Material) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MaterialMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Material).
func (m *MaterialMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MaterialMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.material != nil {
		fields = append(fields, material.FieldMaterial)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MaterialMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case material.FieldMaterial:
		return m.Material()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MaterialMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case material.FieldMaterial:
		return m.OldMaterial(ctx)
	}
	return nil, fmt.Errorf("unknown Material field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MaterialMutation) SetField(name string, value ent.Value) error {
	switch name {
	case material.FieldMaterial:
		v, ok := value.(materials.Material)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaterial(v)
		return nil
	}
	return fmt.Errorf("unknown Material field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MaterialMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MaterialMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MaterialMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Material numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MaterialMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MaterialMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MaterialMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Material nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MaterialMutation) ResetField(name string) error {
	switch name {
	case material.FieldMaterial:
		m.ResetMaterial()
		return nil
	}
	return fmt.Errorf("unknown Material field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MaterialMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.partners != nil {
		edges = append(edges, material.EdgePartners)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MaterialMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case material.EdgePartners:
		ids := make([]ent.Value, 0, len(m.partners))
		for id := range m.partners {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MaterialMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpartners != nil {
		edges = append(edges, material.EdgePartners)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MaterialMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case material.EdgePartners:
		ids := make([]ent.Value, 0, len(m.removedpartners))
		for id := range m.removedpartners {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MaterialMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpartners {
		edges = append(edges, material.EdgePartners)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MaterialMutation) EdgeCleared(name string) bool {
	switch name {
	case material.EdgePartners:
		return m.clearedpartners
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MaterialMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Material unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MaterialMutation) ResetEdge(name string) error {
	switch name {
	case material.EdgePartners:
		m.ResetPartners()
		return nil
	}
	return fmt.Errorf("unknown Material edge %s", name)
}

// PartnerMutation represents an operation that mutates the Partner nodes in the graph.
type PartnerMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	address              *string
	rating               *int
	addrating            *int
	radiusOfOperation    *float64
	addradiusOfOperation *float64
	clearedFields        map[string]struct{}
	materials            map[int]struct{}
	removedmaterials     map[int]struct{}
	clearedmaterials     bool
	done                 bool
	oldValue             func(context.Context) (*Partner, error)
	predicates           []predicate.Partner
}

var _ ent.Mutation = (*PartnerMutation)(nil)

// partnerOption allows management of the mutation configuration using functional options.
type partnerOption func(*PartnerMutation)

// newPartnerMutation creates new mutation for the Partner entity.
func newPartnerMutation(c config, op Op, opts ...partnerOption) *PartnerMutation {
	m := &PartnerMutation{
		config:        c,
		op:            op,
		typ:           TypePartner,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPartnerID sets the ID field of the mutation.
func withPartnerID(id int) partnerOption {
	return func(m *PartnerMutation) {
		var (
			err   error
			once  sync.Once
			value *Partner
		)
		m.oldValue = func(ctx context.Context) (*Partner, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Partner.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPartner sets the old Partner of the mutation.
func withPartner(node *Partner) partnerOption {
	return func(m *PartnerMutation) {
		m.oldValue = func(context.Context) (*Partner, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PartnerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PartnerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PartnerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PartnerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Partner.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAddress sets the "address" field.
func (m *PartnerMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *PartnerMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Partner entity.
// If the Partner object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PartnerMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *PartnerMutation) ResetAddress() {
	m.address = nil
}

// SetRating sets the "rating" field.
func (m *PartnerMutation) SetRating(i int) {
	m.rating = &i
	m.addrating = nil
}

// Rating returns the value of the "rating" field in the mutation.
func (m *PartnerMutation) Rating() (r int, exists bool) {
	v := m.rating
	if v == nil {
		return
	}
	return *v, true
}

// OldRating returns the old "rating" field's value of the Partner entity.
// If the Partner object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PartnerMutation) OldRating(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRating: %w", err)
	}
	return oldValue.Rating, nil
}

// AddRating adds i to the "rating" field.
func (m *PartnerMutation) AddRating(i int) {
	if m.addrating != nil {
		*m.addrating += i
	} else {
		m.addrating = &i
	}
}

// AddedRating returns the value that was added to the "rating" field in this mutation.
func (m *PartnerMutation) AddedRating() (r int, exists bool) {
	v := m.addrating
	if v == nil {
		return
	}
	return *v, true
}

// ResetRating resets all changes to the "rating" field.
func (m *PartnerMutation) ResetRating() {
	m.rating = nil
	m.addrating = nil
}

// SetRadiusOfOperation sets the "radiusOfOperation" field.
func (m *PartnerMutation) SetRadiusOfOperation(f float64) {
	m.radiusOfOperation = &f
	m.addradiusOfOperation = nil
}

// RadiusOfOperation returns the value of the "radiusOfOperation" field in the mutation.
func (m *PartnerMutation) RadiusOfOperation() (r float64, exists bool) {
	v := m.radiusOfOperation
	if v == nil {
		return
	}
	return *v, true
}

// OldRadiusOfOperation returns the old "radiusOfOperation" field's value of the Partner entity.
// If the Partner object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PartnerMutation) OldRadiusOfOperation(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRadiusOfOperation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRadiusOfOperation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRadiusOfOperation: %w", err)
	}
	return oldValue.RadiusOfOperation, nil
}

// AddRadiusOfOperation adds f to the "radiusOfOperation" field.
func (m *PartnerMutation) AddRadiusOfOperation(f float64) {
	if m.addradiusOfOperation != nil {
		*m.addradiusOfOperation += f
	} else {
		m.addradiusOfOperation = &f
	}
}

// AddedRadiusOfOperation returns the value that was added to the "radiusOfOperation" field in this mutation.
func (m *PartnerMutation) AddedRadiusOfOperation() (r float64, exists bool) {
	v := m.addradiusOfOperation
	if v == nil {
		return
	}
	return *v, true
}

// ResetRadiusOfOperation resets all changes to the "radiusOfOperation" field.
func (m *PartnerMutation) ResetRadiusOfOperation() {
	m.radiusOfOperation = nil
	m.addradiusOfOperation = nil
}

// AddMaterialIDs adds the "materials" edge to the Material entity by ids.
func (m *PartnerMutation) AddMaterialIDs(ids ...int) {
	if m.materials == nil {
		m.materials = make(map[int]struct{})
	}
	for i := range ids {
		m.materials[ids[i]] = struct{}{}
	}
}

// ClearMaterials clears the "materials" edge to the Material entity.
func (m *PartnerMutation) ClearMaterials() {
	m.clearedmaterials = true
}

// MaterialsCleared reports if the "materials" edge to the Material entity was cleared.
func (m *PartnerMutation) MaterialsCleared() bool {
	return m.clearedmaterials
}

// RemoveMaterialIDs removes the "materials" edge to the Material entity by IDs.
func (m *PartnerMutation) RemoveMaterialIDs(ids ...int) {
	if m.removedmaterials == nil {
		m.removedmaterials = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.materials, ids[i])
		m.removedmaterials[ids[i]] = struct{}{}
	}
}

// RemovedMaterials returns the removed IDs of the "materials" edge to the Material entity.
func (m *PartnerMutation) RemovedMaterialsIDs() (ids []int) {
	for id := range m.removedmaterials {
		ids = append(ids, id)
	}
	return
}

// MaterialsIDs returns the "materials" edge IDs in the mutation.
func (m *PartnerMutation) MaterialsIDs() (ids []int) {
	for id := range m.materials {
		ids = append(ids, id)
	}
	return
}

// ResetMaterials resets all changes to the "materials" edge.
func (m *PartnerMutation) ResetMaterials() {
	m.materials = nil
	m.clearedmaterials = false
	m.removedmaterials = nil
}

// Where appends a list predicates to the PartnerMutation builder.
func (m *PartnerMutation) Where(ps ...predicate.Partner) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PartnerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Partner).
func (m *PartnerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PartnerMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.address != nil {
		fields = append(fields, partner.FieldAddress)
	}
	if m.rating != nil {
		fields = append(fields, partner.FieldRating)
	}
	if m.radiusOfOperation != nil {
		fields = append(fields, partner.FieldRadiusOfOperation)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PartnerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case partner.FieldAddress:
		return m.Address()
	case partner.FieldRating:
		return m.Rating()
	case partner.FieldRadiusOfOperation:
		return m.RadiusOfOperation()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PartnerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case partner.FieldAddress:
		return m.OldAddress(ctx)
	case partner.FieldRating:
		return m.OldRating(ctx)
	case partner.FieldRadiusOfOperation:
		return m.OldRadiusOfOperation(ctx)
	}
	return nil, fmt.Errorf("unknown Partner field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PartnerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case partner.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case partner.FieldRating:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRating(v)
		return nil
	case partner.FieldRadiusOfOperation:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRadiusOfOperation(v)
		return nil
	}
	return fmt.Errorf("unknown Partner field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PartnerMutation) AddedFields() []string {
	var fields []string
	if m.addrating != nil {
		fields = append(fields, partner.FieldRating)
	}
	if m.addradiusOfOperation != nil {
		fields = append(fields, partner.FieldRadiusOfOperation)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PartnerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case partner.FieldRating:
		return m.AddedRating()
	case partner.FieldRadiusOfOperation:
		return m.AddedRadiusOfOperation()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PartnerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case partner.FieldRating:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRating(v)
		return nil
	case partner.FieldRadiusOfOperation:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRadiusOfOperation(v)
		return nil
	}
	return fmt.Errorf("unknown Partner numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PartnerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PartnerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PartnerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Partner nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PartnerMutation) ResetField(name string) error {
	switch name {
	case partner.FieldAddress:
		m.ResetAddress()
		return nil
	case partner.FieldRating:
		m.ResetRating()
		return nil
	case partner.FieldRadiusOfOperation:
		m.ResetRadiusOfOperation()
		return nil
	}
	return fmt.Errorf("unknown Partner field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PartnerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.materials != nil {
		edges = append(edges, partner.EdgeMaterials)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PartnerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case partner.EdgeMaterials:
		ids := make([]ent.Value, 0, len(m.materials))
		for id := range m.materials {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PartnerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmaterials != nil {
		edges = append(edges, partner.EdgeMaterials)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PartnerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case partner.EdgeMaterials:
		ids := make([]ent.Value, 0, len(m.removedmaterials))
		for id := range m.removedmaterials {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PartnerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmaterials {
		edges = append(edges, partner.EdgeMaterials)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PartnerMutation) EdgeCleared(name string) bool {
	switch name {
	case partner.EdgeMaterials:
		return m.clearedmaterials
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PartnerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Partner unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PartnerMutation) ResetEdge(name string) error {
	switch name {
	case partner.EdgeMaterials:
		m.ResetMaterials()
		return nil
	}
	return fmt.Errorf("unknown Partner edge %s", name)
}
